{"version":3,"sources":["logo.svg","AppTabPanel.tsx","FunctionVSClass/counterfunction.tsx","FunctionVSClass/counterclass.tsx","FunctionVSClass/functionvsclass.tsx","QueryCloud/wordsplitter.ts","QueryCloud/used3words.ts","QueryCloud/querycloud.tsx","ReduxHooks/store.redux.ts","CustomHooks/userefsize.ts","QueryCloud/trumptweets.tsx","HooksEvents/hooksevents.tsx","ReduxHooks/selectors.redux.ts","ReduxHooks/dispatchers.redux.ts","ReduxHooks/todoactions.tsx","ReduxHooks/todolist.tsx","ReduxHooks/predefinedTodos.ts","ReduxHooks/todowithredux.tsx","ReduxHooks/reduxhookscontainer.tsx","AppTabs.tsx","theme.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","useStyles","makeStyles","theme","createStyles","root","width","height","container","display","flexDirection","justifyContent","alignItems","AppTabPanel","props","children","value","index","classes","Box","className","hidden","Counter","React","count","setCount","title","document","CardContent","Typography","variant","component","Button","color","onClick","ComponentCounter","setState","state","updateTitle","this","flexWrap","card","minWidth","Height","FunctionVsClass","Grid","direction","justify","item","Card","delimiterRegEx","RegExp","source","useD3Words","queries","wordCount","minFontSize","maxFontSize","words","useMemo","dict","filter","x","forEach","toLowerCase","replace","trim","split","w","hasOwnProperty","result","Object","keys","push","text","getWords","sortedWords","sort","a","b","slice","size","length","minValue","maxValue","getSize","scaleSqrt","domain","range","map","processWords","Actions","getFontSize","d","getTransform","y","rotate","fill","scaleOrdinal","schemeCategory10","getFill","i","toString","defaultProps","QueryCloud","mergedProps","parentDivRef","useRef","useState","setSize","useEffect","parentDiv","current","offsetWidth","offsetHeight","useRefSize","d3SvgG","setd3SvgG","d3Words","svgG","select","append","style","attr","selectAll","remove","cloud","padding","font","fontSize","on","tags","data","enter","renderd3Cloud","start","id","ref","rootGrid","flexGrow","cardcontent","TrumpTweets","setQueries","trumpTweets","fetch","response","json","t","getTrumpTweets","xs","logarea","minHeight","backgroundColor","palette","background","paper","secondary","border","queueMessage","messageBufferRef","message","currentValue","now","Date","toISOString","getTimedMessage","useLoggingEffect","name","textAreaRef","shouldRun","deps","textArea","messages","scrollTop","scrollHeight","HooksEvents","setValue","useOneTimeEffect","useConstantEffect","Math","random","useRandomEffect","defaultSettings","showCompleted","myDayOnly","rootReducer","combineReducers","todo","action","newState","type","AddTodo","newId","max","newTodo","due","myDay","completed","payload","AddBatchTodos","RemoveTodo","idToRemove","splice","findIndex","RemoveAll","ToggleMyDay","indexToToggleMyDay","todoToggleMyDay","ToggleComplete","toggleCompleteIndex","todoToggleComplete","settings","SetShowCompleted","SetMyDayOnly","todoStore","createStore","settingsStateSelector","store","todoSelector","createSelector","todos","showCompletedSelector","showMyDayOnlySelector","activeTodoSelector","showMyDayOnly","completedTodoSelector","useDispatchers","dispatch","useDispatch","populateTodos","useCallback","createAddBatchTodosAction","addRandomTodo","createAddTodoAction","deleteTodo","createRemoveTodoAction","toggleComplete","createToggleCompleteAction","toggleMyDay","createToggleMyDayAction","setShowCompleted","createSetShowCompletedAction","setShowMyDayOnly","createSetMyDayOnlyAction","TodoActions","labelId","ListItemSecondaryAction","FormControlLabel","control","Switch","checked","tabIndex","inputProps","onChange","label","Checkbox","IconButton","edge","aria-label","list","maxHeight","overflow","listSection","ul","avatar","margin","todaylabel","TodoList","activeTodos","completedTodos","todoSubList","subheader","key","ListSubheader","ListItem","role","ListItemAvatar","Avatar","ListItemText","primary","List","predefinedTodos","setHours","marginTop","button","spacing","TodoWithRedux","useSelector","ReduxHooksContainer","panel","AppTabs","activeTabIndex","setActiveTabIndex","AppBar","position","Tabs","event","newValue","indicatorColor","textColor","scrollButtons","Tab","Paper","darkTheme","createMuiTheme","lightTheme","appLogo","animation","link","transform","Boolean","window","location","hostname","match","ReactDOM","render","setTheme","MuiThemeProvider","Toolbar","src","logo","alt","Link","href","target","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.480ff6f0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport { Box } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            width: 'auto',\n            height: '100%',\n        },\n        container: {\n            display: 'flex',\n            flexDirection: 'column',\n            justifyContent: 'flex-start',\n            alignItems: 'center',\n            width: 'auto',\n            height: '100%',\n        },\n    }),\n);\n\ninterface TabPanelProps {\n    children?: React.ReactNode;\n    index: number;\n    value: number;\n}\n\nexport function AppTabPanel(props: TabPanelProps) {\n    const { children, value, index } = props;\n    const classes = useStyles();\n\n    return (\n        <Box className={classes.root} hidden={value !== index}>\n            <div className={classes.container}>\n                {children}\n            </div>\n        </Box>\n    );\n}\n  \n  ","import * as React from 'react';\nimport { Typography, Button, CardContent } from '@material-ui/core';\n\n// React function component uses hooks providing \"counter\" capability\nexport const Counter = () => {\n    const [count, setCount] = React.useState(0);\n\n    React.useEffect(() => {\n        const title = `Function Component: ${count}`;\n        document.title = title;\n    }, [count]);\n\n    return (\n        <CardContent>\n            <Typography variant='h4'>Function Component</Typography>\n            <br></br>\n            <Typography variant='body1' component='p'>You clicked {count} times</Typography>\n            <br></br>\n            <Button variant='contained' color='primary' onClick = {() => setCount(count + 1)}>Click me</Button>\n        </CardContent>\n    );\n};","import * as React from 'react';\r\nimport { Button, Typography, CardContent } from '@material-ui/core';\r\n\r\ninterface IComponentCounterState {\r\n    count: number;\r\n}\r\n\r\n// React function component uses hooks providing \"counter\" capability\r\nexport class ComponentCounter extends React.PureComponent<{}, IComponentCounterState> {\r\n    constructor(props: {}) {\r\n        super(props);\r\n        this.state = {\r\n            count: 0,\r\n        } as IComponentCounterState;\r\n    }\r\n\r\n    public render(): JSX.Element {\r\n        return (\r\n            <CardContent>\r\n                <Typography variant='h4'>Class Component</Typography>\r\n                <br></br>\r\n                <Typography variant='body1' component='p'>You clicked {this.state.count} times</Typography>\r\n                <br></br>\r\n                <Button variant='contained' color='primary' onClick = {() => this.setCount(this.state.count + 1)}>Click me</Button>\r\n            </CardContent>\r\n        );\r\n    }\r\n\r\n    public componentDidUpdate(): void {\r\n        this.updateTitle();\r\n    }\r\n\r\n    public componentDidMount(): void {\r\n        this.updateTitle();\r\n    }\r\n\r\n    private setCount = (count: number) => {\r\n        this.setState({\r\n            ...this.state,\r\n            count: count,\r\n        });\r\n    }\r\n\r\n    // This kind of DOM operation have to be repeated in both cDU and cDM\r\n    private updateTitle = () => {\r\n        document.title = `Class Component: ${this.state.count}`;\r\n    }\r\n}\r\n","import * as React from 'react';\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport { Card, Grid } from '@material-ui/core';\n\nimport { Counter } from './counterfunction';\nimport { ComponentCounter } from './counterclass';\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            height: '100%',\n            flexWrap: 'wrap',\n        },\n        card: {\n            width: '25vw',\n            minWidth: '300',\n            Height: 400,\n        },\n    }),\n);\n\nexport const FunctionVsClass = () => {\n    const classes = useStyles();\n\n    return (\n        <Grid container direction='row' justify='space-around' alignItems='center' className={classes.root}>\n            <Grid item>\n                <Card className={classes.card}>\n                    <Counter />\n                </Card>\n            </Grid>\n            <Grid item>\n                <Card className={classes.card}>\n                    <ComponentCounter />\n                </Card>\n            </Grid>\n        </Grid>\n    );\n}","// interfaces\nexport interface IWord {\n    text: string;\n    value: number;\n}\n\n// Punctuation and stop word regex.\n// Punctuation character escaping please see: https://www.regular-expressions.info/charclass.html\n// Stop word list is limited now.\nconst urlRegex = /\\bhttps?:\\/\\/[-a-zA-Z0-9@:%._+~#=]{1,256}\\.[a-z]{2,6}([-a-zA-Z0-9@:%_+.~#?&amp;//=]*)\\b/gi;\nconst punctuationRegex = /[\\\\\\-\\][/^$.|?*+(){}'\",#!%&;:=`~@]+/gi;\n// tslint:disable-next-line:max-line-length\nconst stopWordRegex = /\\b(?:https|you|your|yours|i|me|my|we|our|ours|us|he|him|his|she|her|hers|they|them|their|it|its|who|whose|which|this|that|the|an|a|is|are|am|was|were|be|being|have|has|will|would|shall|should|when|where|why|what|how|now|if|then|but|and|or|so|to|for|on|of|at|as|about|with|from|in|into|onto|up|by|than|can|let|please|go|do|did|<pii>|just|because|since|(?:\\d+))\\b/gi;\nconst delimiterRegEx = new RegExp(`${urlRegex.source}|${punctuationRegex.source}|${stopWordRegex.source}`, 'g');\n\n// Helper method to convert list of strings to IWord list by filtering out punctuations and stop words\nexport const getWords = (queries: string[]) => {\n    // tslint:disable-next-line:no-any\n    const dict: any = {};\n    queries.filter((x: string) => !!x).forEach((x: string) => {\n        const rawWords = x.toLowerCase().replace(delimiterRegEx, ' ').trim().split(/\\s+/);\n        rawWords.forEach((w: string) => {\n            if (dict.hasOwnProperty(w)) {\n                dict[w] ++;\n            } else {\n                dict[w] = 1;\n            }\n        });\n    });\n\n    // Convert to IWords array\n    const result = [] as IWord[];\n    Object.keys(dict).forEach((w: string) => {\n        result.push({text: w, value: dict[w]});\n    });\n\n    return result;\n};\n\n","import { Word as d3Word } from 'd3-cloud';\nimport { IWord, getWords } from './wordsplitter';\nimport { scaleSqrt } from \"d3-scale\";\nimport { useMemo } from 'react';\n\n// Process words array, sort and take top element, and convert to d3 Words\nexport const processWords = (words: IWord[], wordCount: number, minFontSize: number, maxFontSize: number) => {\n    const sortedWords = words.sort((a: IWord, b: IWord) => b.value - a.value).slice(0, wordCount);\n    const size = sortedWords.length;\n    const minValue = size > 0 ? sortedWords[size - 1].value : 1;\n    const maxValue = size > 0 ? sortedWords[0].value : 1;\n\n    // map min value and max value to the min/max font size\n    const getSize = scaleSqrt().domain([minValue, maxValue]).range([minFontSize, maxFontSize]);\n    return sortedWords.map<d3Word>((w: IWord) => {\n        return { text: w.text, size: getSize(w.value) } as d3Word;\n    });\n};\n\nexport type d3Word = d3Word;\nexport const useD3Words = (queries: string[], wordCount: number, minFontSize: number, maxFontSize: number) => {\n    // Use useMemo hooks to avoid recomputing the words during each render.\n    // Split queries and get words from the queries\n    const words = useMemo(() => {\n        return getWords(queries);\n    }, [queries]);\n\n    // Get d3words used for rendering purpose\n    const d3Words = useMemo(() => {\n        return processWords(words, wordCount, minFontSize, maxFontSize);\n    },\n    [words, wordCount, minFontSize, maxFontSize]);\n\n    return [d3Words];\n}","import * as React from 'react';\r\nimport { useEffect, useState } from 'react';\r\nimport cloud from 'd3-cloud';\r\nimport { scaleOrdinal } from 'd3-scale';\r\nimport { schemeCategory10 } from 'd3-scale-chromatic';\r\nimport { select, Selection } from 'd3-selection';\r\nimport { d3Word, useD3Words } from './used3words';\r\nimport { useRefSize } from '../CustomHooks/userefsize';\r\n\r\nconst DEFAULT_WORD_COUNT = 100;\r\nconst FONT_FAMILY = 'Impact';\r\nconst DEFAULT_MIN_FONT_SIZE = 5;\r\nconst DEFAULT_MAX_FONT_SIZE = 50;\r\n\r\n//\r\n// Functions needed by rendering\r\n//\r\ntype d3SvgGSelection = Selection<SVGGElement, unknown, null, undefined>;\r\nconst getFontSize = (d: d3Word) => d.size + 'px';\r\nconst getTransform = (d: d3Word) => `translate(${d.x}, ${d.y}) rotate(${d.rotate})`;\r\nconst fill = scaleOrdinal(schemeCategory10);\r\nconst getFill = (d: d3Word, i: number) => fill(i.toString());\r\nconst renderd3Cloud = (tags: d3Word[], d3SvgG: d3SvgGSelection) => {\r\n    // d3 rendering logic\r\n    d3SvgG\r\n        .selectAll('text')\r\n        .data(tags)\r\n        .enter()\r\n        .append('text')\r\n        .style('font-size', getFontSize)\r\n        .attr('text-anchor', 'middle')\r\n        .attr('transform', getTransform)\r\n        .attr('fill', getFill)\r\n        .text((d: d3Word) => d.text!);\r\n};\r\n\r\n//\r\n// Word cloud component. Inspired by https://github.com/chrisrzhou/react-wordcloud\r\n//\r\nexport interface IQueryCloudProps {\r\n    queries: string[];\r\n    wordCount?: number;\r\n    minFontSize?: number;\r\n    maxFontSize?: number;\r\n}\r\n\r\nconst defaultProps : Partial<IQueryCloudProps> = {\r\n    wordCount: DEFAULT_WORD_COUNT,\r\n    minFontSize: DEFAULT_MIN_FONT_SIZE,\r\n    maxFontSize: DEFAULT_MAX_FONT_SIZE\r\n};\r\n\r\nexport const QueryCloud = (props: IQueryCloudProps) => {\r\n    const mergedProps = { ...defaultProps, ...props };\r\n\r\n    // use React hooks - ref (dom access), state (info passing between effects) and effect (dom operation for rendering)\r\n    const [parentDivRef, size] = useRefSize();\r\n    const [d3SvgG, setd3SvgG] = useState<d3SvgGSelection>();\r\n    const [d3Words] = useD3Words(\r\n        mergedProps.queries,\r\n        mergedProps.wordCount!,\r\n        mergedProps.minFontSize!,\r\n        mergedProps.maxFontSize!);\r\n\r\n    // Effect to initialize the D3 SVG g selection used to draw the chart.\r\n    // This has no dependency so this will only be run once.\r\n    useEffect(() => {\r\n        const parentDiv = parentDivRef.current!;\r\n        const [width, height] = size;\r\n\r\n        // Only create element when we have a drawing area\r\n        if (width > 0 && height > 0) {\r\n            // Add a svg container and set attributes\r\n            const svgG = select(parentDiv)\r\n                .append('svg')\r\n                    .style('display', 'block')\r\n                    .attr('width', width)\r\n                    .attr('height', height)\r\n                .append('g')\r\n                    .attr('transform', `translate(${width / 2},${height / 2})`);\r\n\r\n            // Update state with the g element selection and size\r\n            setd3SvgG(svgG);\r\n\r\n            // cleanup callback\r\n            return () => {\r\n                select(parentDiv).selectAll('*').remove();\r\n            };\r\n        }\r\n    },\r\n    [parentDivRef, size]);\r\n\r\n    // Effect to render the chart after d3 initialization.\r\n    // This will rerun when d3svg g element is recreated or words change.\r\n    useEffect(() => {\r\n        if (!d3Words || !d3SvgG || size[0] === 0 || size[1] === 0) {\r\n            return;\r\n        }\r\n\r\n        // Layout then render\r\n        cloud()\r\n            .size(size)\r\n            .words(d3Words)\r\n            .padding(2)\r\n            //.rotate(() => Math.random() * 120 - 60)\r\n            .rotate(0)\r\n            .font(FONT_FAMILY)\r\n            .fontSize((d: d3Word) => d.size!)\r\n            .on('end', (tags: d3Word[]) => renderd3Cloud(tags, d3SvgG))\r\n            .start();\r\n    },\r\n    [d3SvgG, size, d3Words]);\r\n\r\n    // the container div\r\n    return <div id='testdiv' ref={parentDivRef} style={{width:'100%', height:'100%'}}/>;\r\n};","import { createStore, combineReducers } from 'redux';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useCallback } from 'react';\r\n\r\nexport interface ITodo {\r\n    id: number;\r\n    title: string;\r\n    due?: Date;\r\n    myDay: boolean;\r\n    completed: boolean;\r\n}\r\n\r\n// Actions and action creators\r\nenum Actions {\r\n    AddTodo = 'AddTodo',\r\n    AddBatchTodos = 'AddBatchTodos',\r\n    RemoveTodo = 'RemoveTodo',\r\n    RemoveAll = 'RemoveAll',\r\n    ToggleMyDay = 'ToggleMyDay',\r\n    ToggleComplete = 'ToggleComplete',\r\n    SetShowCompleted = 'SetShowCompleted',\r\n    SetMyDayOnly = 'SetMyDayOnly',\r\n}\r\n\r\ninterface IAction<T = any> {\r\n    type: Actions;\r\n    payload?: T;\r\n}\r\n\r\nexport const createAddTodoAction = (todo: ITodo) => {\r\n    return { type: Actions.AddTodo, payload: todo } as IAction<ITodo>;\r\n}\r\n\r\nexport const createAddBatchTodosAction = (todos: ITodo[]) => {\r\n    return { type: Actions.AddBatchTodos, payload: todos } as IAction<ITodo[]>;\r\n}\r\n\r\nexport const createRemoveTodoAction = (id: number) => {\r\n    return { type: Actions.RemoveTodo, payload: id } as IAction<number>;\r\n}\r\n\r\nexport const createRemoveAllAction = () => {\r\n    return { type: Actions.RemoveAll } as IAction;\r\n}\r\n\r\nexport const createToggleMyDayAction = (id: number) => {\r\n    return { type: Actions.ToggleMyDay, payload: id } as IAction<number>;\r\n}\r\n\r\nexport const createToggleCompleteAction = (id: number) => {\r\n    return { type: Actions.ToggleComplete, payload: id } as IAction<number>;\r\n}\r\n\r\nexport const createSetShowCompletedAction = (showCompleted: boolean) => {\r\n    return { type: Actions.SetShowCompleted, payload: showCompleted } as IAction<boolean>;\r\n}\r\n\r\nexport const createSetMyDayOnlyAction = (myDayOnly: boolean) => {\r\n    return { type: Actions.SetMyDayOnly, payload: myDayOnly } as IAction<boolean>;\r\n}\r\n\r\n\r\n// todo list reducer\r\nconst todoReducer = (state: ITodo[] = [], action: IAction) => {\r\n    let newState: ITodo[] = [...state];\r\n    switch (action.type) {\r\n        case Actions.AddTodo:\r\n            // assign id for the new todo. if it's the first, set it to 0.\r\n            // otherwise set it to the current max id + 1 to avoid conflicts\r\n            const newId = newState.length > 0 ? (Math.max(...newState.map(t => t.id)) + 1) : 0;\r\n            const newTodo = {id: newId, due: new Date(), myDay: false, completed: false, ...action.payload as ITodo};\r\n            newState.push(newTodo);\r\n            break;\r\n        case Actions.AddBatchTodos:\r\n            newState = [...action.payload as ITodo[]];\r\n            break;\r\n        case Actions.RemoveTodo:\r\n            // remove the given todo with the id\r\n            const idToRemove = action.payload as number;\r\n            newState.splice(newState.findIndex(t => t.id === idToRemove), 1);\r\n            break;\r\n        case Actions.RemoveAll:\r\n            // remove all todos\r\n            newState = [];\r\n            break;\r\n        case Actions.ToggleMyDay:\r\n            // toggle the myday status for the given todo\r\n            const indexToToggleMyDay = newState.findIndex(t => t.id === action.payload as number);\r\n            if (indexToToggleMyDay >= 0) {\r\n                const todoToggleMyDay = newState[indexToToggleMyDay];\r\n                newState[indexToToggleMyDay] = {...todoToggleMyDay, myDay: !todoToggleMyDay.myDay};\r\n            }\r\n            break;\r\n        case Actions.ToggleComplete:\r\n            // toggle the complete status for the given todo\r\n            const toggleCompleteIndex = newState.findIndex(t => t.id === action.payload as number);\r\n            if (toggleCompleteIndex >= 0) {\r\n                const todoToggleComplete = newState[toggleCompleteIndex];\r\n                newState[toggleCompleteIndex] = {...todoToggleComplete, completed: !todoToggleComplete.completed};\r\n            }\r\n            break;\r\n        }\r\n\r\n    return newState;\r\n}\r\n\r\n// Settings reducer\r\nexport interface ITodoAppSettings {\r\n    showCompleted: boolean;\r\n    myDayOnly: boolean;\r\n}\r\n\r\nconst defaultSettings = {\r\n    showCompleted: true,\r\n    myDayOnly: false,\r\n} as ITodoAppSettings;\r\n\r\nconst settingsReducer = (state: ITodoAppSettings = defaultSettings, action: IAction) => {\r\n    let newState: ITodoAppSettings = {...state};\r\n    switch (action.type) {\r\n        case Actions.SetShowCompleted:\r\n            newState.showCompleted = action.payload as boolean;\r\n            break;\r\n        case Actions.SetMyDayOnly:\r\n            newState.myDayOnly = action.payload as boolean;\r\n            break;\r\n        }\r\n\r\n    return newState;\r\n}\r\n\r\n\r\n// root reducer and store\r\nconst rootReducer = combineReducers({todo: todoReducer, settings: settingsReducer});\r\nexport const todoStore = createStore(rootReducer, {});\r\nexport type ITodoAppStore = ReturnType<typeof rootReducer>;","import { useEffect, useRef, useState, RefObject } from 'react';\n\n// Customer hook to get a ref element's size.\n// This needs special handling since element size can be applied at later stage in React so single one time\n// useEffect will not work - it needs to run after each dom update.\n// This is by itself a cheap operation - however we have to do size comparison to avoid unnecessary rerendering caused by this.\nexport const useRefSize = (): [RefObject<HTMLDivElement>, [number, number]] => {\n    const parentDivRef = useRef<HTMLDivElement>(null);\n    const [size, setSize] = useState<[number, number]>([0, 0]);\n\n    // Effect to get the ref div size, and set state when it's no longer zero.\n    // We are disabling the useEffect missing dependency warning here since we want this to run after each render.\n    // eslint-disable-next-line \n    useEffect(() => {\n        const parentDiv = parentDivRef.current!;\n        const width = parentDiv.offsetWidth;\n        const height = parentDiv.offsetHeight;\n        \n        // since size's initial value is [0,0], this comparison gaurantees that we only do this when size is valid.\n        if (width !== size[0] || height !== size[1]) {\n            setSize([width, height]);\n        }\n    });\n\n    return [parentDivRef, size];\n}","import React, { useState, useEffect } from 'react';\r\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\r\n\r\nimport { QueryCloud } from './querycloud';\r\nimport { Card, CardContent, Typography, Grid } from '@material-ui/core';\r\n\r\nexport const numberOfTweets = 800;\r\nexport const maxFontSize = 80;\r\nexport const wordCount = 80;\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        rootGrid: {\r\n            flexGrow: 1,\r\n            justifyContent: 'center',\r\n            alignItems: 'center',\r\n            flexDirection: 'column',\r\n        },\r\n        card: {\r\n            height: '100%',\r\n            width: '80vw',\r\n            display: 'flex',\r\n        },\r\n        cardcontent: {\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            justifyContent: 'center',\r\n            alignItems: 'center',\r\n            flexGrow: 1,\r\n        },\r\n    }),\r\n);\r\n\r\nexport const TrumpTweets = () => {\r\n    const classes = useStyles();  \r\n    const [queries, setQueries] = useState<string[]>([]);\r\n\r\n    useEffect(() => {\r\n        const getTrumpTweets = async () => {\r\n            const trumpTweets = [] as string[];\r\n            // data from http://trumptwitterarchive.com/\r\n            const url = 'https://d5nxcu7vtzvay.cloudfront.net/data/realdonaldtrump/2018.json';\r\n            const response = await fetch(url);\r\n            const tweets = await response.json();\r\n            tweets.slice(0, numberOfTweets).map((t: any) => trumpTweets.push(t.text.replace('&amp;', '&')));\r\n\r\n            setQueries(trumpTweets);\r\n        };\r\n\r\n        getTrumpTweets();\r\n    \r\n    }, []);\r\n\r\n    return (\r\n        <Grid container direction='column' justify='center' alignItems='center' className={classes.rootGrid}>\r\n            <Grid item xs={10}>\r\n                <Card className={classes.card}>\r\n                    <CardContent className={classes.cardcontent}>\r\n                        <Typography variant='h4'>Trump 2018 last {numberOfTweets} tweets</Typography>\r\n                        <QueryCloud queries={queries} wordCount={wordCount} maxFontSize={maxFontSize}/>\r\n                    </CardContent>\r\n                </Card>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};","import * as React from 'react';\nimport { useState, useRef, useEffect } from 'react';\nimport { Theme, createStyles, makeStyles, Grid, Card, CardContent, Typography, Button } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            flexGrow: 1,\n            justifyContent: 'center',\n            alignItems: 'center',\n            flexDirection: 'column',\n        },\n        logarea: {\n            minHeight: '60vh',\n            minWidth: '50vw',\n            backgroundColor: theme.palette.background.paper,\n            color: theme.palette.text.secondary,\n            border: 'none',\n            flexGrow: 1,\n        },\n    }),\n);\n\nconst getTimedMessage = (message: string) => {\n    const now = new Date();\n    return `${now.toISOString()} - ${message}\\n`;\n}\n\nconst queueMessage = (messageBufferRef: React.MutableRefObject<string>, value: number, message:string) => {\n    const currentValue = messageBufferRef.current;\n    messageBufferRef.current = currentValue + getTimedMessage(`[${value}] ${message}`);\n}\n\nconst showMessages = (textArea: HTMLTextAreaElement, messages: string) => {\n    textArea.value = messages;\n    textArea.scrollTop = textArea.scrollHeight;\n}\n\nconst useLoggingEffect = (\n    name: string,\n    value: number,\n    textAreaRef: React.RefObject<HTMLTextAreaElement>,\n    messageBufferRef: React.MutableRefObject<string>,\n    shouldRun: boolean,\n    deps?: readonly any[]\n): void => {\n    // Use effect hooks to change the text area dom element directly.\n    // We cannot use state to do this - it'll cause infinite rendering.\n    useEffect(() => {\n        if (shouldRun) {\n            queueMessage(messageBufferRef, value, `${name} running`);\n            showMessages(textAreaRef.current!, messageBufferRef.current);\n\n            return () => {\n                queueMessage(messageBufferRef, value, `${name} cleanup`);\n            }\n        }\n    },\n    // Use the given dependency list (blindly). eslint gives warning so we mute it.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    deps);\n}\n\nconst useOneTimeEffect = (value: number, textAreaRef: React.RefObject<HTMLTextAreaElement>, messageBufferRef: React.MutableRefObject<string>): void => {\n    // No dependency list\n    useLoggingEffect('OneTimeEffect', value, textAreaRef, messageBufferRef, true, []);\n}\n\nconst useConstantEffect = (value: number, textAreaRef: React.RefObject<HTMLTextAreaElement>, messageBufferRef: React.MutableRefObject<string>): void => {\n    // Depending on value so will rerender whenever value updates\n    useLoggingEffect('ConstantEffect', value, textAreaRef, messageBufferRef, true, [value]);\n}\n\nconst useRandomEffect = (value: number, textAreaRef: React.RefObject<HTMLTextAreaElement>, messageBufferRef: React.MutableRefObject<string>):void => {\n    // Depending on value so will rerender whenever value updates.\n    // However, the effect only takes place randomly\n    useLoggingEffect('RandomEffect', value, textAreaRef, messageBufferRef, Math.random() > 0.5, [value]);\n}\n\n// function component\nexport const HooksEvents = () => {\n    // state to hold value which is used to trigger rerender\n    const [value, setValue] = useState(0);\n    // we use a string array ref as a in memory cache to hold messages to show\n    const messageBufferRef = useRef<string>('');\n    // use mutable object ref to hold messages. We cannot put this into state.\n    const textAreaRef = useRef<HTMLTextAreaElement>(null);\n\n    useOneTimeEffect(value, textAreaRef, messageBufferRef);\n    useConstantEffect(value, textAreaRef, messageBufferRef);\n    useRandomEffect(value, textAreaRef, messageBufferRef);\n\n    queueMessage(messageBufferRef, value, \"rendering\");\n\n    const classes = useStyles();\n\n    return (\n        <Grid container className={classes.root}>\n            <Grid item xs={10}>\n                <Card>\n                    <CardContent>\n                        <Typography variant='h4'>Hooks events</Typography>\n                        <Typography variant='body2' className={classes.logarea} component='textarea' ref={textAreaRef}></Typography>\n                        <br></br>\n                        <Button variant='contained' color='primary' onClick={() => setValue(value + 1)}>Rerender</Button>\n                    </CardContent>\n                </Card>\n            </Grid>\n        </Grid>\n    );\n};","import { ITodoAppStore, ITodo } from \"./store.redux\";\r\nimport { createSelector } from 'reselect';\r\n\r\n// top todo selector\r\nexport const todoStateSelector = (store: ITodoAppStore) => store.todo;\r\n\r\n// top settings selector\r\nexport const settingsStateSelector = (store: ITodoAppStore) => store.settings;\r\n\r\n// todo selector\r\nexport const todoSelector = createSelector(\r\n    [todoStateSelector, settingsStateSelector],\r\n    (todos, settings) => todos.filter(x => settings.showCompleted || !x.completed)\r\n);\r\n\r\n// show completed selector\r\nexport const showCompletedSelector = createSelector(\r\n    [settingsStateSelector],\r\n    settings => settings.showCompleted\r\n);\r\n\r\n// show my day only selector\r\nexport const showMyDayOnlySelector = createSelector(\r\n    [settingsStateSelector],\r\n    settings => settings.myDayOnly\r\n);\r\n\r\n// active todo selector\r\nexport const activeTodoSelector = createSelector(\r\n    [todoSelector, showMyDayOnlySelector],\r\n    (todos, showMyDayOnly) => todos.filter(x => !x.completed && (!showMyDayOnly || x.myDay))\r\n);\r\n\r\n// completed todo selector\r\nexport const completedTodoSelector = createSelector(\r\n    [todoSelector, showCompletedSelector, showMyDayOnlySelector],\r\n    (todos, showCompleted, showMyDayOnly) => showCompleted ? todos.filter(x => x.completed && (!showMyDayOnly || x.myDay)) : []\r\n);\r\n","import { useDispatch } from \"react-redux\";\r\nimport { createAddBatchTodosAction, createAddTodoAction, createRemoveTodoAction, createToggleCompleteAction, createToggleMyDayAction, createSetShowCompletedAction, createSetMyDayOnlyAction, ITodo } from \"./store.redux\";\r\nimport { useCallback } from \"react\";\r\n\r\n// dispatchers\r\nexport const useDispatchers = () => {\r\n    const dispatch = useDispatch();\r\n\r\n    // Populate with predefined todos. We use the useCallbacl here to follow hooks dependency rules and \r\n    // avoid infinite rerenering.\r\n    // We usually need to specify this as part of the useEffect dependencies.\r\n    // If we don't define this as callback and define this in the function component directly,\r\n    // then a new function is created during each render.\r\n    // In that case, the useEffect will be run forever.\r\n    // Furthermore, this can also help improve performance.\r\n    const populateTodos = useCallback((todos: ITodo[]) => {\r\n        dispatch(createAddBatchTodosAction(todos));\r\n    }, [dispatch]);\r\n\r\n    // Note we are not using \"useCallback\" here, since this won't cause the above issue and we want a new due date.\r\n    const addRandomTodo = useCallback((todo: ITodo) => {\r\n        dispatch(createAddTodoAction(todo));\r\n    }, [dispatch]);\r\n\r\n    const deleteTodo = useCallback((id: number) => {\r\n        dispatch(createRemoveTodoAction(id));\r\n    }, [dispatch]);;\r\n\r\n    const toggleComplete = useCallback((id: number) => {\r\n        dispatch(createToggleCompleteAction(id));\r\n    }, [dispatch]);\r\n\r\n    const toggleMyDay = useCallback((id: number) => {\r\n        dispatch(createToggleMyDayAction(id));\r\n    }, [dispatch]);\r\n\r\n    const setShowCompleted = useCallback((showCompleted: boolean) => {\r\n        dispatch(createSetShowCompletedAction(showCompleted));\r\n    }, [dispatch]);\r\n\r\n    const setShowMyDayOnly = useCallback((myDayOnly: boolean) => {\r\n        dispatch(createSetMyDayOnlyAction(myDayOnly));\r\n    }, [dispatch]);\r\n\r\n    return { populateTodos, addRandomTodo, deleteTodo, toggleComplete, toggleMyDay, setShowCompleted, setShowMyDayOnly };\r\n}","import * as React from 'react';\r\nimport { ListItemSecondaryAction, FormControlLabel } from '@material-ui/core';\r\nimport { IconButton, Checkbox, Switch } from '@material-ui/core';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport { ITodo } from './store.redux';\r\nimport { useDispatchers } from './dispatchers.redux';\r\n\r\nexport interface ITodoActionsProps {\r\n    labelId: string;\r\n    todo: ITodo;\r\n}\r\n\r\n// Todo secondary action bar\r\nexport const TodoActions = (props: ITodoActionsProps) => {\r\n    const { toggleMyDay, toggleComplete, deleteTodo } = useDispatchers();\r\n    const { todo, labelId } = props;\r\n\r\n    return (\r\n        <ListItemSecondaryAction>\r\n            <FormControlLabel\r\n                control={\r\n                    <Switch\r\n                        checked={todo.myDay}\r\n                        tabIndex={-1}\r\n                        color='secondary'\r\n                        inputProps={{ 'aria-labelledby': labelId }}\r\n                        onChange={() => toggleMyDay(todo.id)}\r\n                    />\r\n                }\r\n                label={todo.myDay ? 'Today' : 'Later'}\r\n            />\r\n            <FormControlLabel\r\n                control={\r\n                    <Checkbox\r\n                        checked={todo.completed}\r\n                        tabIndex={-1}\r\n                        inputProps={{ 'aria-labelledby': labelId }}\r\n                        onChange={() => toggleComplete(todo.id)}\r\n                    />\r\n                }\r\n                label='Completed'\r\n            />\r\n            <IconButton edge=\"end\" aria-label=\"delete\" onClick={() => deleteTodo(todo.id)}>\r\n                <DeleteIcon />\r\n            </IconButton>\r\n        </ListItemSecondaryAction>\r\n    );\r\n}","import * as React from 'react';\nimport { List, ListItem, ListSubheader, ListItemText, ListItemAvatar } from '@material-ui/core';\nimport { Theme, createStyles, makeStyles, Avatar } from '@material-ui/core';\nimport AssignmentIcon from '@material-ui/icons/Assignment';\nimport NotificationsActiveIcon from '@material-ui/icons/NotificationsActive';\nimport { ITodo } from './store.redux';\nimport { TodoActions } from './todoactions';\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        list: {\n            width: '50vw',\n            minWidth: '480',\n            maxHeight: '70vh',\n            flexGrow: 1,\n            overflow: 'auto',\n            backgroundColor: theme.palette.background.paper,\n        },\n        listSection: {\n            backgroundColor: 'inherit',\n        },\n        ul: {\n            backgroundColor: 'inherit',\n            padding: 0,\n        },\n        avatar: {\n            margin: 10,\n        },\n        todaylabel: {\n            width: 45,\n        }\n    }),\n);\n\nexport interface ITodoListProps {\n    activeTodos: ITodo[];\n    completedTodos: ITodo[];\n}\n\nexport const TodoList = (props: ITodoListProps) => {\n    const classes = useStyles();\n    const { activeTodos, completedTodos } = props;\n\n    // todo sub list component\n    const todoSubList = (subheader: string, todos: ITodo[]) => {\n        return (\n            <li key={`section-${subheader}`} className={classes.listSection}>\n                <ul className={classes.ul}>\n                    <ListSubheader>{subheader}</ListSubheader>\n                    {todos.map((todo: ITodo) => {\n                        const labelId = `todo-list-item-${todo.id}-label`;\n                        return (\n                            <ListItem key={todo.id} role=\"listitem\">\n                                <ListItemAvatar>\n                                    <Avatar className={classes.avatar}>\n                                        {todo.myDay ? <NotificationsActiveIcon/> : <AssignmentIcon/>}\n                                    </Avatar>\n                                </ListItemAvatar>\n                                <ListItemText id={labelId} primary={`${todo.title}`} />\n                                <TodoActions todo={todo} labelId={labelId} />\n                            </ListItem>\n                        );\n                    })}\n                </ul>\n            </li>\n        );\n    };\n\n    return (\n        <List role=\"list\" className={classes.list} subheader={<li />}>\n            {activeTodos.length > 0 && todoSubList('Active Todos', activeTodos)}\n            {completedTodos.length > 0 && todoSubList('Completed Todos', completedTodos)}\n        </List>\n    );\n}\n","import { ITodo } from './store.redux';\n\nexport const predefinedTodos = [\n    { id: 0, title: 'eat breakfast', myDay: true, due: new Date().setHours(7), completed: false },\n    { id: 1, title: 'drive to work', myDay: true, due: new Date().setHours(8), completed: true },\n    { id: 3, title: 'planning',      myDay: true, due: new Date().setHours(8), completed: true },\n    { id: 4, title: 'have lunch',    myDay: true, due: new Date().setHours(12), completed: false },\n    { id: 5, title: 'meeting',       myDay: true, due: new Date().setHours(15), completed: false },\n    { id: 6, title: 'dinner',        myDay: true, due: new Date().setHours(19), completed: false },\n    { id: 7, title: 'go home',       myDay: false, due: new Date().setHours(20), completed: false },\n    { id: 8, title: 'glue broken heart',    myDay: false, due: new Date().setHours(23), completed: false },\n    { id: 2, title: 'coding',        myDay: true, due: new Date().setHours(23), completed: true },\n    { id: 9, title: 'heaven or hell',       myDay: false, completed: false },\n] as ITodo[];","import * as React from 'react';\nimport { useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport { Theme, createStyles, makeStyles, Grid, Button, FormControlLabel, Checkbox } from '@material-ui/core';\nimport { activeTodoSelector, completedTodoSelector, showCompletedSelector, showMyDayOnlySelector } from './selectors.redux';\nimport { useDispatchers } from './dispatchers.redux';\nimport { ITodo } from './store.redux';\nimport { TodoList } from './todolist';\nimport { predefinedTodos } from './predefinedTodos';\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            flexDirection:'column',\n            justifyContent:\"flex-start\",\n            alignItems:\"center\",\n            flexGrow: 1,\n            marginTop: '48px',\n        },\n        button: {\n            margin: theme.spacing(1),\n        },\n    }),\n);\n\nconst createRandomTodo = () => {\n    return {\n        title: \"random todo\",\n        myDay: Math.random() > 0.5,\n    } as ITodo;\n};\n\nexport const TodoWithRedux = () => {\n    const activeTodos = useSelector(activeTodoSelector);\n    const completedTodos = useSelector(completedTodoSelector);\n    const showCompleted = useSelector(showCompletedSelector);\n    const showMyDayOnly = useSelector(showMyDayOnlySelector);\n    const { populateTodos, addRandomTodo, setShowCompleted, setShowMyDayOnly } = useDispatchers();\n    const classes = useStyles();\n\n    // \"One time\" pre-populate\n    useEffect(() => {\n        populateTodos(predefinedTodos);\n    }, [populateTodos]);\n\n    return  (\n        <Grid container className={classes.root}>\n            <Grid item>\n                <Button variant='contained' color='primary' className={classes.button} onClick={() => populateTodos(predefinedTodos)}>Populate</Button>\n                <Button variant='contained' color='primary' className={classes.button} onClick={() => addRandomTodo(createRandomTodo())}>Add Todo</Button>\n                <FormControlLabel\n                    control={\n                        <Checkbox\n                            checked={showMyDayOnly}\n                            tabIndex={-1}\n                            onChange={() => setShowMyDayOnly(!showMyDayOnly)}\n                        />\n                    }\n                    label='ShowTodayOnly'\n                />\n                <FormControlLabel\n                    control={\n                        <Checkbox\n                            checked={showCompleted}\n                            tabIndex={-1}\n                            onChange={() => setShowCompleted(!showCompleted)}\n                        />\n                    }\n                    label='ShowCompleted'\n                />\n\n            </Grid>\n            <Grid item>\n                <TodoList activeTodos={activeTodos} completedTodos={completedTodos} />\n            </Grid>\n        </Grid>\n    );\n};","import * as React from 'react';\r\nimport { Provider } from 'react-redux';\r\nimport { todoStore } from './store.redux';\r\nimport { TodoWithRedux } from './todowithredux';\r\n\r\nexport const ReduxHooksContainer = () => {\r\n    return  (\r\n        <Provider store={todoStore}>\r\n            <TodoWithRedux />\r\n        </Provider>\r\n    );\r\n};","import React from 'react';\nimport { AppBar, Tabs, Tab, Paper, createStyles, makeStyles, Theme } from '@material-ui/core';\nimport { AppTabPanel } from './AppTabPanel';\n\nimport { FunctionVsClass } from './FunctionVSClass/functionvsclass';\nimport { TrumpTweets } from './QueryCloud/trumptweets';\nimport { HooksEvents } from './HooksEvents/hooksevents';\nimport { ReduxHooksContainer } from './ReduxHooks/reduxhookscontainer';\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            display: 'flex',\n            flexDirection: 'column',\n            flexGrow: 1,\n        },\n        panel: {\n            display: 'flex',\n            flexDirection: 'column',\n            flexGrow: 1,\n        },\n    }),\n);\n\nexport const AppTabs = () => {\n    const [activeTabIndex, setActiveTabIndex] = React.useState(0);\n    const classes = useStyles();\n\n    const handleChange = (event: React.ChangeEvent<{}>, newValue: number) => {\n        setActiveTabIndex(newValue);\n    }\n  \n    return (\n        <div className={classes.root}>\n            <AppBar position=\"static\" color=\"default\">\n                <Tabs\n                    value={activeTabIndex}\n                    onChange={handleChange}\n                    indicatorColor=\"primary\"\n                    textColor=\"primary\"\n                    variant=\"scrollable\"\n                    scrollButtons=\"auto\"\n                    aria-label=\"scrollable auto tabs example\"\n                >\n                    <Tab label='Function & Class' />\n                    <Tab label='Trump Tweets' />\n                    <Tab label='Hook Events' />\n                    <Tab label='Redux Hooks' />\n                </Tabs>\n            </AppBar>\n            <Paper className={classes.panel}>\n                <AppTabPanel value={activeTabIndex} index={0}>\n                    <FunctionVsClass />\n                </AppTabPanel>\n                <AppTabPanel value={activeTabIndex} index={1}>\n                    <TrumpTweets />\n                </AppTabPanel>\n                <AppTabPanel value={activeTabIndex} index={2}>\n                    <HooksEvents />\n                </AppTabPanel>\n                <AppTabPanel value={activeTabIndex} index={3}>\n                    <ReduxHooksContainer />\n                </AppTabPanel>\n            </Paper>\n        </div>\n    );\n}\n","import { createMuiTheme } from '@material-ui/core/styles';\n\n// dark theme\nexport const darkTheme = createMuiTheme({\n    palette: {\n        type: 'dark',\n    },\n});\n\n// light theme\nexport const lightTheme = createMuiTheme({\n    palette: {\n        type: 'light',\n    },\n});\n  \n  ","import React, { useState } from 'react';\nimport logo from './logo.svg';\nimport { makeStyles, Theme, MuiThemeProvider } from '@material-ui/core/styles';\nimport { AppBar, Typography, Toolbar, Link, Paper, FormControlLabel, Switch } from '@material-ui/core';\nimport { AppTabs } from './AppTabs';\nimport { darkTheme, lightTheme } from './theme';\n\nconst useStyles = makeStyles((theme: Theme) => ({\n    root: {\n        height: '100vh',\n        display: 'flex',\n        flexDirection: 'column',\n    },\n    title: {\n        flexGrow: 1,\n    },\n    appLogo: {\n        animation: '$App-logo-spin infinite 15s linear',\n        height: '64px',\n    },\n    link: {\n        margin: theme.spacing(2),\n    },\n    '@keyframes App-logo-spin': {\n        'from': {\n            transform: 'rotate(0deg)',\n        },\n        'to': {\n            transform: 'rotate(360deg)',\n        },\n    },\n}));\n\nconst gitHubUrl = 'https://github.com/sidecus/reactstudy';\n\nexport const App = () => {\n    const [theme, setTheme] = useState<Theme>(darkTheme);\n    const classes = useStyles();\n\n\n    const toggleTheme = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setTheme(event.target.checked ? darkTheme : lightTheme);\n    }\n\n    return (\n        <MuiThemeProvider theme={theme}>\n            <Paper className={classes.root}>\n                <AppBar position='static' color='inherit'>\n                    <Toolbar>\n                        <img src={logo} className={classes.appLogo} alt=\"logo\" />\n                        <Typography variant=\"h6\" className={classes.title}>\n                            React Study\n                            <Link href={gitHubUrl} color='inherit' className={classes.link}>sidecus</Link>\n                        </Typography>\n                        <FormControlLabel\n                            control={\n                                <Switch checked={theme === darkTheme} onChange={toggleTheme} color='primary'/>\n                            }\n                            label='Dark Theme'\n                        />\n                    </Toolbar>\n                </AppBar>\n                <AppTabs />\n            </Paper>\n        </MuiThemeProvider>\n    );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}